{
  "moduleReplacements": [
    {
      "type": "simple",
      "moduleName": "arr-diff",
      "replacement": "Use a.filter((item) => !b.includes(item))",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "array-last",
      "replacement": "Use arr.at(-1) or arr[arr.length - 1]",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "array-union",
      "replacement": "Use [...new Set([...a, ...b])]",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "array-uniq",
      "replacement": "Use [...new Set(arr)]",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "array-unique",
      "replacement": "Use [...new Set(arr)]",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "arrify",
      "replacement": "Use (v == null ? [] : Array.isArray(v) ? v : [v])",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "call-bind",
      "replacement": "Use Function.call.bind(v)",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "clone-regexp",
      "replacement": "Use new RegExp(regexpToCopy)",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "es-get-iterator",
      "replacement": "Use v[Symbol.iterator]?.()",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "es-set-tostringtag",
      "replacement": "Use Object.defineProperty(target, Symbol.toStringTag, { value, configurable: true })",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "filter-obj",
      "replacement": "Use Object.fromEntries(Object.entries(obj).filter(fn))",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "has-flag",
      "replacement": "Use process.argv.includes('--flag')",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-array-buffer",
      "replacement": "Use v instanceof ArrayBuffer, or if cross-realm, use Object.prototype.toString.call(v) === \"[object ArrayBuffer]\"",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-boolean-object",
      "replacement": "Use Object.prototype.toString.call(v) === \"[object Boolean]\"",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-ci",
      "replacement": "Use Boolean(process.env.CI)",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-date-object",
      "replacement": "Use v instanceof Date, or if cross-realm, use Object.prototype.toString.call(v) === \"[object Date]\"",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-even",
      "replacement": "Use (n % 2) === 0",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-finite",
      "replacement": "Use Number.isFinite(v)",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-negative",
      "replacement": "Use (n) => n < 0",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-negative-zero",
      "replacement": "Use Object.is(v, -0)",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-npm",
      "replacement": "Use process.env.npm_config_user_agent?.startsWith(\"npm\")",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-number",
      "replacement": "Use typeof v === \"number\" || (typeof v === \"string\" && Number.isFinite(+v))",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-number-object",
      "replacement": "Use Object.prototype.toString.call(v) === \"[object Number]\"",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-odd",
      "replacement": "Use (n % 2) === 1",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-plain-object",
      "replacement": "Use v && typeof v === \"object\" && (Object.getPrototypeOf(v) === null || Object.getPrototypeOf(v) === Object.prototype)",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-primitive",
      "replacement": "Use v === null || (typeof v !== \"function\" && typeof v !== \"object\")",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-regexp",
      "replacement": "Use v instanceof RegExp, or if cross-realm, use Object.prototype.toString.call(v) === \"[object RegExp]\"",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-string",
      "replacement": "Use typeof str === \"string\"",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-travis",
      "replacement": "Use (\"TRAVIS\" in process.env)",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-whitespace",
      "replacement": "Use str.trim() === \"\" or /^\\s*$/.test(str)",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "is-windows",
      "replacement": "Use process.platform === \"win32\"",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "kind-of",
      "replacement": "Use typeof v, or Object.prototype.toString.call(v) to get the internal [[Class]]",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "lower-case",
      "replacement": "Use str.toLocaleLowerCase() or str.toLowerCase()",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "repeat-string",
      "replacement": "Use str.repeat(n)",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "slash",
      "replacement": "Use path.startsWith('\\\\?\\') ? path : path.replace(/\\/g, '/')",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "split-lines",
      "replacement": "Use str.split(/\\r?\\n/)",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "uniq",
      "replacement": "Use [...new Set(arr)]",
      "category": "micro-utilities"
    },
    {
      "type": "simple",
      "moduleName": "upper-case",
      "replacement": "Use str.toLocaleUpperCase() or str.toUpperCase()",
      "category": "micro-utilities"
    }
  ]
}
